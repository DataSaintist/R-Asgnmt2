
makeCacheMatrix <- function(x = matrix()) {
    # inv will store the cached inverse matrix
    inv <- NULL

    # Set the matrix
    set <- function(y) {
        x <<- y
        inv <<- NULL
    }
    # Get the matrix
    get <- function() x

    # Set the inverse
    setinv <- function(inverse) inv <<- inverse
    # Get the inverse
    getinv <- function() inv

    # Return Matrix
    list(set = set, get = get, setinv = setinv, getinv = getinv)
}


# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. 
# If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
    inv <- x$getinv()

    # In case inverse already calculated, just return
    if (!is.null(inv)) {
        message("Please wait .... getting cached data")
        return(inv)
    }

    data <- x$get()
    inv <- solve(data, ...)

    # Cache the inverse
    x$setinv(inv)

    # Return the inverse
    inv
}